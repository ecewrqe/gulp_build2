@import "../_variables/colors";


/* Bootstrap variables for functions=============================*/

$escaped-characters: (
                ("<", "%3c"),
                (">", "%3e"),
                ("#", "%23"),
                ("(", "%28"),
                (")", "%29")
) !default;

// color jumper
$theme-color-interval:   8%  !default;

// yiq lightness value
$yiq-contrasted-threshold:   150  !default;

$yiq-text-dark:      $gray-900  !default;
$yiq-text-light:     $white  !default;

/* Bootstrap functions=============================*/

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name){
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map{
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {

    } @else if not comparable($prev-num, $num){
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}'!";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint start at zero.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  @if length($map) > 0 {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.

@function str-replace($string, $search, $replace: ""){
  $index: str-index($string, $search);

  @if $index{
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + length($search)), $search, $replace)
  }

  @return $string;
}

/*
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="' + $fill-color + '" d="M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z"/></svg>
*/
@function escape-svg($string){
  @each $char, $encoded in $escaped-characters {
    $svg-string: str-replace($string, $char, $encoded);
  }
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light){

  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 299) + ($b * 299)) / 1000;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}

// Retrieve color Sass maps
@function color($key: "blue"){
  @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
  @return map-get($theme-colors, $key);
}

@function gray($key: "100"){
  @return map-get($grays, $key);
}

// Request a theme color level
@function theme-color-level($color-name, $level){
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);
  @return mix($color-base, $color, $level * $theme-color-interval);
}

// Calc
@function add($value1, $value2, $return-calc: true){
  @if $value1 == null {
    @return $value2;
  }
  @if $value2 == null {
    @return $value1;
  }

  @if type_of($value1) == number and type-of($value1) == number and comparable($value1, $value2){
    @return $value1 + $value2;
  }
  @return if($return-calc == true,
          calc(#{$value1} + #{$value2}), $value1 + unquote("+") + $value2)
}


@function subtract($value1, $value2, $return-calc: true){
  @if $value1 == null and $value2 == null {
    @return null;
  }

  @if $value1 == null {
    @return -$value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type_of($value1) == number and type-of($value1) == number and comparable($value1, $value2){
    @return $value1 - $value2;
  }
  @return if($return-calc == true,
          calc(#{$value1} - #{$value2}), $value1 + unquote("-") + $value2)
}

/* End Bootstrap functions=============================*/

$browser-default-font-size: 16px !default;

@function _rem($px){
  @return $px / $browser-default-font-size * 1rem;
}