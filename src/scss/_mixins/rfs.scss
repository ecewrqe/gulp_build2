@import "../variables";
/* Bootstrap rfs =========================*/
// Automated font-resizing

$rfs-base-font-size: $rem-20 !default;
$rfs-font-size-unit: rem !default;

$rfs-breakpoint: $px-1200 !default;
$rfs-breakpoint-unit: px !default;

// Resize font-size based on screen height and width
$rfs-two-dimensional: false !default;

// Factor of decrease
$rfs-factor: 10 !default;

@if type-of($rfs-factor) != "number" or $rfs-factor <=1{
  @error "`#{$rfs-factor}` is not a valid $rfs-factor, it must be greater than 1"
}

// Generate enable or disable classes
$rfs-class: false !default;

$rfs-rem-value: 16 !default;

// Safari iframe resize bug:
$rfs-safari-iframe-resize-bug-fix: false !default;
$rfs-base-font-size-unit: unit($rfs-base-font-size);

// Remove px-unit
@if $rfs-base-font-size-unit == "rem" {
  $rfs-base-font-size: $rfs-base-font-size * $rfs-rem-value;
}

$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);

@if $rfs-breakpoint-unit-cache == "rem"{
  $rfs-breakpoint: $rfs-breakpoint * $rfs-rem-value;
}

// Responsive font-size mixin
// if(1,2,3)
@mixin rfs($fs, $important: false){
  // Cache $fs unit
  $fs-unit: if(type-of($fs) == "number", unit($fs), false);

  // Add !important suffix if needed
  $rfs-suffix: if($important, " !important", "");

  // If $fs isn't a number or not px or rem, such as em
  @if not $fs-unit or $fs-unit != "" and $fs-unit != "px" and $fs-unit != "rem"{
    font-size: #{$fs} #{$rfs-suffix};
  }
  @else{
    $rfs-static: null;
    $rfs-fluid: null;

    // remove px-unit from $fs for calculations
    @if $fs-unit == "rem"{
      $fs: $fs * $rfs-rem-value;
    }

    // Set default font-size
    @if $rfs-font-size-unit == rem {
      $rfs-static: #{$fs / $rfs-rem-value}rem #{$rfs-suffix};
    }@else if $rfs-font-size-unit == px {
      $rfs-static: #{$fs}px#{$rfs-suffix};
    }

    @else{
      @error "`#{$rfs-font-size-unit}` is not a valid unit for $rfs-font-size-unit. Use `px` or `rem`."
    }


    // Only add media query if font-size is bigger as the minimum font-size
    // If $rfs-factor == 1, no rescaling will take place

    @if $fs > $rfs-base-font-size and $enable-responsive-font-sizes{
      $min-width: null;
      $variable-unit: null;

      // Calculate minimum font-size for given font-size and minimum font-size
      $fs-min: $rfs-base-font-size + ($fs - $rfs-base-font-size) / $rfs-factor;

      // Calculate difference between given font-size and minimum font-size for given font-size
      $fs-diff: $fs - $fs-min;

      // Base font-size formatting
      // No need to check if the unit is valid, because we did that before
      $min-width: if($rfs-font-size-unit == rem, #{$fs-min / $rfs-rem-value}rem, #{$fs-min});

      // If two-dimensional, use smallest of screen width and height
      $variable-unit: if($rfs-two-dimensional, vmin, vw);

      // Calculate the variable width between 0 and $rfs-breakpoint
      $variable-width: #{$fs-diff * 100 / $rfs-breakpoint}#{$variable-unit};

      // Set the calculated font-size.
      $rfs-fluid: calc(#{$min-width} + #{$variable-width}) #{$rfs-suffix};
    }

    //Rendering
    @if $rfs-fluid == null {
      font-size: $rfs-static;
    }
    @else{
      $mq-value: null;

      // RFS breakpoint formatting
      @if $rfs-breakpoint-unit == em or $rfs-breakpoint-unit == rem {
        $mq-value: #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit};
      }
      @else if $rfs-breakpoint-unit == px {
        $mq-value: #{$rfs-breakpoint}#{$rfs-breakpoint-unit};
      }
      @else{
        @error "`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit, Use `em`, `rem` or `px`";
      }

      @if $rfs-class == "disable" {
        &, .disable-responsive-font-size &,
        &.disable-responsive-font-size {
          font-size: $rfs-static;
        }
      }
      @else {
        font-size: $rfs-static;
      }

      @if $rfs-two-dimensional {
        @media (max-width: #{$mq-value}), (max-height: #{$mq-value}){
          @if $rfs-class == "enable" {
            .enable-responsive-font-size &,
            &.enable-responsive-font-size {
              font-size: $rfs-fluid;
            }
          }
          @else {
            font-size: $rfs-fluid;
          }

          @if $rfs-safari-iframe-resize-bug-fix {
            // stylelint-disable-next-line length-zero-no-unit
            min-width: 0;
          }
        }
      }
      @else{
        @media(max-width: #{$mq-value}){
          @if $rfs-class == "enable" {
            .enable-responsive-font-size &,
            &.enable-responsive-font-size {
              font-size: $rfs-fluid;
            }
          }
          @else {
            font-size: $rfs-fluid;
          }

          @if $rfs-safari-iframe-resize-bug-fix {
            // stylelint-disable-next-line length-zero-no-unit
            min-width: 0;
          }
        }
      }
    }

  }

}

// The font-size & responsize-font-size mixin uses RFS to rescale font sizes
@mixin font-size($fs, $important: false){
  @include rfs($fs, $important);
}

@mixin responsive-font-size($fs, $important: false){
  @include rfs($fs, $important);
}
